# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from draw import Draw
from algorithms import *
from Settings import *
from pio import *


class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.showMaximized()
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Canvas = Draw(parent=self.centralwidget)
        self.Canvas.setObjectName("Canvas")
        self.horizontalLayout.addWidget(self.Canvas)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1559, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAnalysis = QtWidgets.QMenu(parent=self.menubar)
        self.menuAnalysis.setObjectName("menuAnalysis")
        self.menuView = QtWidgets.QMenu(parent=self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuClear = QtWidgets.QMenu(parent=self.menubar)
        self.menuClear.setObjectName("menuClear")
        self.menuSettings = QtWidgets.QMenu(parent=self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.actionOpen = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icons/open_file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtGui.QAction(parent=MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/icons/exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon1)
        self.actionExit.setObjectName("actionExit")
        self.actionCreate_DT = QtGui.QAction(parent=MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icons/triangles2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionCreate_DT.setIcon(icon2)
        self.actionCreate_DT.setObjectName("actionCreate_DT")
        self.actionContour_lines = QtGui.QAction(parent=MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/icons/contours2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionContour_lines.setIcon(icon3)
        self.actionContour_lines.setObjectName("actionContour_lines")
        self.actionSlope = QtGui.QAction(parent=MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/icons/slope2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSlope.setIcon(icon4)
        self.actionSlope.setObjectName("actionSlope")
        self.actionAspect = QtGui.QAction(parent=MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/icons/orientation2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAspect.setIcon(icon5)
        self.actionAspect.setObjectName("actionAspect")
        self.actionDT = QtGui.QAction(parent=MainWindow)
        self.actionDT.setCheckable(True)
        self.actionDT.setEnabled(False)
        self.actionDT.setObjectName("actionDT")
        self.actionSlope_2 = QtGui.QAction(parent=MainWindow)
        self.actionSlope_2.setCheckable(True)
        self.actionSlope_2.setEnabled(False)
        self.actionSlope_2.setObjectName("actionSlope_2")
        self.actionAspect_2 = QtGui.QAction(parent=MainWindow)
        self.actionAspect_2.setCheckable(True)
        self.actionAspect_2.setEnabled(False)
        self.actionAspect_2.setObjectName("actionAspect_2")
        self.actionContour_lines_2 = QtGui.QAction(parent=MainWindow)
        self.actionContour_lines_2.setCheckable(True)
        self.actionContour_lines_2.setEnabled(False)
        self.actionContour_lines_2.setObjectName("actionContour_lines_2")
        self.actionClear_results = QtGui.QAction(parent=MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("images/icons/clear.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_results.setIcon(icon6)
        self.actionClear_results.setObjectName("actionClear_results")
        self.actionClear_All = QtGui.QAction(parent=MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("images/icons/clear_all.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_All.setIcon(icon7)
        self.actionClear_All.setObjectName("actionClear_All")
        self.actionParameters = QtGui.QAction(parent=MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("images/icons/settings.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionParameters.setIcon(icon8)
        self.actionParameters.setObjectName("actionParameters")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuAnalysis.addAction(self.actionCreate_DT)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionContour_lines)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionSlope)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionAspect)
        self.menuView.addAction(self.actionDT)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionContour_lines_2)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionSlope_2)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionAspect_2)
        self.menuClear.addAction(self.actionClear_results)
        self.menuClear.addSeparator()
        self.menuClear.addAction(self.actionClear_All)
        self.menuSettings.addAction(self.actionParameters)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAnalysis.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuClear.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionCreate_DT)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionContour_lines)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSlope)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionAspect)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionClear_results)
        self.toolBar.addAction(self.actionClear_All)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionParameters)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionExit)

        #Settings
        self.settings = QtWidgets.QDialog()
        self.ui = Ui_Settings()
        self.ui.setupUi(self.settings)

        self.retranslateUi(MainWindow)
        
        #user function
        self.actionOpen.triggered.connect(self.openClick) # type: ignore
        self.actionCreate_DT.triggered.connect(self.createDTClick) # type: ignore
        self.actionContour_lines.triggered.connect(self.createContourLinesClick) # type: ignore
        self.actionSlope.triggered.connect(self.analyzeSlopeClick) # type: ignore
        self.actionAspect.triggered.connect(self.analyzeExpositionClick) # type: ignore
        self.actionClear_results.triggered.connect(self.clearClick) # type: ignore
        self.actionClear_All.triggered.connect(self.clearAllClick) # type: ignore
        
        self.actionExit.triggered.connect(MainWindow.close) # type: ignore
        self.actionDT.triggered.connect(self.viewDTClick) # type: ignore
        self.actionContour_lines_2.triggered.connect(self.viewContourLinesClick) # type: ignore
        self.actionSlope_2.triggered.connect(self.viewSlopeClick) # type: ignore
        self.actionAspect_2.triggered.connect(self.viewExpositionClick) # type: ignore
        
        self.actionParameters.triggered.connect(self.setParameters)
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
    def openClick(self):
        #Opening data
        
        #Create object
        io = IO()

        #Widgete size
        size = self.Canvas.size()
        w = size.width()
        h = size.height() 
        #Polygons from shapefile
        points = io.loadData(w,h)
        
        #If polygons load 
        if points != None:
            #Show polygons
            self.Canvas.setData(points)
                
    
    def createDTClick(self):
        #get input data
        points = self.Canvas.getPoints()
        
        if (points == []):
            pass
        
        else:  
            #run DT
            a = Algorithms()
            dt = a.createDT(points)
        
            #set results
            self.Canvas.setDT(dt)
        
            #repaint
            self.Canvas.repaint()
        
            #Check menu item
            self.actionDT.setEnabled(True)
            self.actionDT.setChecked(True)
            
    def createContourLinesClick(self):
        a = Algorithms()
        
        #If data
        points = self.Canvas.getPoints()
        
        if (points == []):
            pass
        
        else:  
            #Do we have a triangulation
            dt = self.Canvas.getDT()
            
            #No triangulation constructed
            if not dt:     
                
                #Get points
                points =  self.Canvas.getPoints() 
                
                if (points == []):
                    pass
                
                else:
                    #Create DT   
                    dt = a.createDT(points)
                
                    #Set results
                    self.Canvas.setDT(dt)
            
            #Do we have a triangulation
            dt = self.Canvas.getDT()        
            
            #Get contour line parameters
            zmin = float(self.ui.lineEdit.text())
            zmax = float(self.ui.lineEdit_2.text())
            dz = float(self.ui.lineEdit_3.text())
            
            #create contour lines
            contours = a.createContourLine(dt, zmin, zmax, dz)
            
            #set results
            self.Canvas.setContours(contours, zmin, zmax, dz)
            
            #repaint
            self.Canvas.repaint() 
            
            #Check menu item
            self.actionContour_lines_2.setEnabled(True)
            self.actionContour_lines_2.setChecked(True)
    
    def analyzeSlopeClick(self):
        a = Algorithms()
        
        #If data
        points = self.Canvas.getPoints()
        
        if (points == []):
            pass
        
        else:  
        
            dt = self.Canvas.getDT()
            
            #No triangulation constructed
            if not dt:     
                
                #Get points
                points =  self.Canvas.getPoints() 
                
                if (points == []):
                    pass
                
                else:
                    #Create DT   
                    dt = a.createDT(points)
                
                    #Set results
                    self.Canvas.setDT(dt)
            
            #Do we have a triangulation
            dt = self.Canvas.getDT()
                
            #create contour lines
            dtm_slope = a.analyzeDTMSlope(dt)
            
            #set results
            self.Canvas.setDTMSlope(dtm_slope)
            
            #repaint
            self.Canvas.repaint() 
            
            #Check menu item
            
            self.actionSlope_2.setEnabled(True)
            self.actionSlope_2.setChecked(True) 
    
    def analyzeExpositionClick(self):
        a = Algorithms()
        
        #If data
        points = self.Canvas.getPoints()
        
        if (points == []):
            pass
        
        else:  
            
            dt = self.Canvas.getDT()
            
            #No triangulation constructed
            if not dt:     
                
                #Get points
                points =  self.Canvas.getPoints() 
                
                if (points == []):
                    pass
                
                else:
                    #Create DT   
                    dt = a.createDT(points)
                
                    #Set results
                    self.Canvas.setDT(dt)
            
            #Do we have a triangulation
            dt = self.Canvas.getDT()
                
            #create contour lines
            dtm_aspect = a.analyzeDTMAspect(dt)
            
            #set results
            self.Canvas.setDTMAspect(dtm_aspect)
            
            #repaint
            self.Canvas.repaint()
            
            #Check menu item
            self.actionAspect_2.setEnabled(True)
            self.actionAspect_2.setChecked(True) 
    
    def viewDTClick(self):
        #Enable/disable drawing
        self.Canvas.setViewDT(self.actionDT.isChecked())
        
        #Update
        self.Canvas.update()

    def viewContourLinesClick(self):
        #Enable/disable drawing
        self.Canvas.setViewContourLines(self.actionContour_lines_2.isChecked())
        
        #Update
        self.Canvas.update()
    
    def viewSlopeClick(self):
        #Enable/disable drawing
        self.Canvas.setViewSlope(self.actionSlope_2.isChecked())
        
        #Update
        self.Canvas.update()

    def viewExpositionClick(self):
        #Enable/disable drawing
        self.Canvas.setViewAspect(self.actionAspect_2.isChecked())
        
        #Update
        self.Canvas.update()
    
    def clearClick(self):   
        self.actionDT.setChecked(False)
        self.actionContour_lines_2.setChecked(False)
        self.actionSlope_2.setChecked(False)
        self.actionAspect_2.setChecked(False)
        self.actionDT.setEnabled(False)
        self.actionContour_lines_2.setEnabled(False)
        self.actionSlope_2.setEnabled(False)
        self.actionAspect_2.setEnabled(False)
        self.Canvas.clearResults()
        self.Canvas.repaint()
    
    def clearAllClick(self):
        self.actionDT.setChecked(False)
        self.actionContour_lines_2.setChecked(False)
        self.actionSlope_2.setChecked(False)
        self.actionAspect_2.setChecked(False)
        self.actionDT.setEnabled(False)
        self.actionContour_lines_2.setEnabled(False)
        self.actionSlope_2.setEnabled(False)
        self.actionAspect_2.setEnabled(False)
        self.Canvas.clearAll()
        self.Canvas.repaint()
        
    def setParameters(self):
        self.settings.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DTM analysis"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuAnalysis.setTitle(_translate("MainWindow", "Analysis"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuClear.setTitle(_translate("MainWindow", "Clear"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setToolTip(_translate("MainWindow", "Exit aplication"))
        self.actionCreate_DT.setText(_translate("MainWindow", "Create DT"))
        self.actionContour_lines.setText(_translate("MainWindow", "Create contour lines"))
        self.actionSlope.setText(_translate("MainWindow", "Analyse slope"))
        self.actionAspect.setText(_translate("MainWindow", "Analyse aspect"))
        self.actionDT.setText(_translate("MainWindow", "DT"))
        self.actionSlope_2.setText(_translate("MainWindow", "Slope"))
        self.actionAspect_2.setText(_translate("MainWindow", "Aspect"))
        self.actionContour_lines_2.setText(_translate("MainWindow", "Contour lines"))
        self.actionClear_results.setText(_translate("MainWindow", "Clear results"))
        self.actionClear_All.setText(_translate("MainWindow", "Clear All"))
        self.actionParameters.setText(_translate("MainWindow", "Parameters"))
        self.actionParameters.setToolTip(_translate("MainWindow", "Parameter settings"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
